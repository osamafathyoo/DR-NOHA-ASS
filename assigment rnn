import numpy as np

text = "شمس ساطعة في السماء"
words = text.split()
unique_words = list(set(words))
word_to_index = {word: i for i, word in enumerate(unique_words)}
index_to_word = {i: word for word, i in word_to_index.items()}
vocab_size = len(unique_words)

input_sequence = [word_to_index[word] for word in words[:3]]
target_index = word_to_index[words[3]]

hidden_size = 3
embedding_size = 2
learning_rate = 0.1

W_e = np.random.rand(vocab_size, embedding_size)
W_hh = np.random.rand(hidden_size, hidden_size)
W_xh = np.random.rand(embedding_size, hidden_size)
W_hy = np.random.rand(hidden_size, vocab_size)
b_y = np.zeros((1, vocab_size))

def tanh(x):
    return np.tanh(x)

def tanh_derivative(x):
    return 1 - np.tanh(x)**2

def softmax(x):
    e_x = np.exp(x - np.max(x))
    return e_x / e_x.sum(axis=0)

def forward(inputs, prev_hidden):
    h = prev_hidden
    for i in range(len(inputs)):
        embedding = W_e[inputs[i]]
        h = tanh(np.dot(embedding, W_xh) + np.dot(h, W_hh))
    output = softmax(np.dot(h, W_hy) + b_y)
    return output, h

initial_hidden = np.zeros((1, hidden_size))

predicted_output, final_hidden = forward(input_sequence, initial_hidden)
predicted_index = np.argmax(predicted_output)
predicted_word = index_to_word[predicted_index]

print(f"النص الأصلي: {text}")
print(f"الكلمات الثلاث الأولى (أرقام): {input_sequence}")
print(f"الكلمة المستهدفة (رقم): {target_index}")
print(f"الكلمة المتوقعة (رقم): {predicted_index}")
print(f"الكلمة المتوقعة: {predicted_word}")

if predicted_index != target_index:
    W_hy[:, target_index] += learning_rate * final_hidden.flatten()

predicted_output_updated, _ = forward(input_sequence, initial_hidden)
predicted_index_updated = np.argmax(predicted_output_updated)
predicted_word_updated = index_to_word[predicted_index_updated]

print("\nبعد تحديث الأوزان يدويًا:")
print(f"الكلمة المتوقعة (رقم): {predicted_index_updated}")
print(f"الكلمة المتوقعة: {predicted_word_updated}")